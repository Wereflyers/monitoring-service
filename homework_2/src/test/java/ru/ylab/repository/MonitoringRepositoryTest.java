package ru.ylab.repository;

import lombok.SneakyThrows;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.testcontainers.containers.PostgreSQLContainer;
import org.testcontainers.junit.jupiter.Container;
import org.testcontainers.junit.jupiter.Testcontainers;
import org.testcontainers.utility.DockerImageName;

import java.sql.*;
import java.time.LocalDate;

import static org.assertj.core.api.Assertions.assertThat;

@Testcontainers
@ExtendWith(MockitoExtension.class)
class MonitoringRepositoryTest {
    private static Connection connection;

    @Container
    public static PostgreSQLContainer<?> postgreSQLContainer =
            new PostgreSQLContainer<>(DockerImageName.parse("postgres:14-alpine"))
            .withExposedPorts(5432);

    @BeforeEach
    @SneakyThrows
    public void setUp() {
        connection = DriverManager.getConnection(
                postgreSQLContainer.getJdbcUrl(),
                postgreSQLContainer.getUsername(),
                postgreSQLContainer.getPassword()
        );
        String insertDataSql1 = "create table if not exists INDICATION_TYPE" +
                "(" +
                "    ID        BIGINT                not null generated by default as identity," +
                "    TYPE_NAME CHARACTER VARYING(30) not null," +
                "    constraint INDICATION_TYPE_PK" +
                "        primary key (ID)" +
                ");";
        PreparedStatement preparedStatement1 = connection.prepareStatement(insertDataSql1);
        preparedStatement1.executeUpdate();
        String insertDataSql2 = "create table if not exists INDICATION" +
                "(" +
                "    ID               BIGINT                        not null generated by default as identity," +
                "    INDICATION_VALUE BIGINT                        not null," +
                "    USERNAME         CHARACTER VARYING(255) not null," +
                "    DATE             TIMESTAMP                     not null," +
                "    TYPE             BIGINT                        not null," +
                "    constraint ID" +
                "        primary key (ID)," +
                "    constraint \"INDICATION_INDICATION_TYPE_ID_fk\"" +
                "        foreign key (TYPE) references INDICATION_TYPE(ID)" +
                ");";
        PreparedStatement preparedStatement2 = connection.prepareStatement(insertDataSql2);
        preparedStatement2.executeUpdate();
        String insertDataSql3 = "INSERT INTO indication_type (TYPE_NAME) VALUES (?)";
        PreparedStatement preparedStatement3 = connection.prepareStatement(insertDataSql3);
        preparedStatement3.setString(1, "type1");
        preparedStatement3.executeUpdate();
    }

    @AfterEach
    @SneakyThrows
    public void delete() {
        String insertDataSql = "drop table if exists indication";
        PreparedStatement preparedStatement = connection.prepareStatement(insertDataSql);
        preparedStatement.executeUpdate();
        String insertDataSql1 = "drop table if exists indication_type";
        PreparedStatement preparedStatement1 = connection.prepareStatement(insertDataSql1);
        preparedStatement1.executeUpdate();
    }

    @Test
    @SneakyThrows
    @DisplayName("Добавление показания в таблицу")
    public void addIndicationTest() {
        sendIndication("name", LocalDate.now());

        String checkDataSql = "SELECT * FROM INDICATION I LEFT JOIN INDICATION_TYPE IT ON I.TYPE = IT.ID";
        PreparedStatement preparedStatement2 = connection.prepareStatement(checkDataSql);
        ResultSet resultSet = preparedStatement2.executeQuery();

        resultSet.next();
        assertThat(resultSet.getLong("indication_value")).isEqualTo(123L);
        assertThat(resultSet.getString("username")).isEqualTo("name");
        assertThat(resultSet.getString("type_name")).isEqualTo("type1");
    }

    @Test
    @SneakyThrows
    @DisplayName("Просмотр последнего показания")
    public void checkLastIndicationTest() {
        sendIndication("name", LocalDate.now().minusMonths(1));
        sendIndication("name", LocalDate.now());

        String checkDataSql = "SELECT * FROM INDICATION I " +
                "LEFT JOIN INDICATION_TYPE IT ON I.TYPE = IT.ID " +
                "WHERE TYPE = ? and USERNAME = ? ";
        CallableStatement callableStatement = connection.prepareCall(checkDataSql, ResultSet.TYPE_SCROLL_SENSITIVE,
                ResultSet.CONCUR_UPDATABLE);
        callableStatement.setLong(1, 1L);
        callableStatement.setString(2, "name");
        ResultSet resultSet = callableStatement.executeQuery();

        resultSet.last();
        assertThat(resultSet.getLong("indication_value")).isEqualTo(123L);
        assertThat(resultSet.getString("username")).isEqualTo("name");
        assertThat(resultSet.getString("type_name")).isEqualTo("type1");
        assertThat(resultSet.getDate("date")).isEqualTo(Date.valueOf(LocalDate.now()));
    }

    @Test
    @SneakyThrows
    @DisplayName("Просмотр показания за месяц")
    public void checkIndicationForMonthTest() {
        sendIndication("name", LocalDate.now().minusMonths(1));
        sendIndication("name", LocalDate.now());

        String checkDataSql = "SELECT * FROM INDICATION WHERE TYPE = ? and USERNAME = ? " +
                "and date_part('month', DATE) = ? and date_part('year', DATE) = ?";
        PreparedStatement preparedStatement = connection.prepareStatement(checkDataSql);
        preparedStatement.setLong(1, 1L);
        preparedStatement.setString(2, "name");
        preparedStatement.setInt(3, 2);
        preparedStatement.setInt(4, LocalDate.now().getYear());
        ResultSet resultSet = preparedStatement.executeQuery();

        resultSet.next();
        assertThat(resultSet.getLong("indication_value")).isEqualTo(123L);
        assertThat(resultSet.getString("username")).isEqualTo("name");
        assertThat(resultSet.getDate("date")).isEqualTo(Date.valueOf(LocalDate.now()));
    }

    @Test
    @SneakyThrows
    @DisplayName("Выгрузка всех показаний")
    public void getAllIndicationsTest() {
        sendIndication("name", LocalDate.now());
        sendIndication("name2", LocalDate.now());

        String checkDataSql = "SELECT * FROM INDICATION I LEFT JOIN INDICATION_TYPE IT ON I.TYPE = IT.ID";
        PreparedStatement preparedStatement = connection.prepareStatement(checkDataSql);
        ResultSet resultSet = preparedStatement.executeQuery();

        resultSet.next();
        assertThat(resultSet.getLong("indication_value")).isEqualTo(123L);
        assertThat(resultSet.getString("username")).isEqualTo("name2");
        assertThat(resultSet.getString("type_name")).isEqualTo("type1");
        resultSet.next();
        assertThat(resultSet.getLong("indication_value")).isEqualTo(123L);
        assertThat(resultSet.getString("username")).isEqualTo("name");
        assertThat(resultSet.getString("type_name")).isEqualTo("type1");
    }

    @Test
    @SneakyThrows
    @DisplayName("Выгрузка всех показаний одного пользователя")
    public void getAllIndicationsOfUserTest() {
        sendIndication("name", LocalDate.now());
        sendIndication("name2", LocalDate.now());

        String checkDataSql = "SELECT * FROM INDICATION I LEFT JOIN INDICATION_TYPE IT ON I.TYPE = IT.ID " +
                "WHERE USERNAME = ?";
        PreparedStatement preparedStatement = connection.prepareStatement(checkDataSql);
        preparedStatement.setString(1, "name");
        ResultSet resultSet = preparedStatement.executeQuery();

        resultSet.next();
        assertThat(resultSet.getLong("indication_value")).isEqualTo(123L);
        assertThat(resultSet.getString("username")).isEqualTo("name");
        assertThat(resultSet.getString("type_name")).isEqualTo("type1");
    }

    private static void sendIndication(String name, LocalDate date) throws SQLException {
        String insertDataSql = "INSERT INTO INDICATION (USERNAME, INDICATION_VALUE, DATE, TYPE) VALUES (?, ?, ?, ?)";
        PreparedStatement preparedStatement = connection.prepareStatement(insertDataSql);
        preparedStatement.setString(1, name);
        preparedStatement.setLong(2, 123L);
        preparedStatement.setDate(3, Date.valueOf(date));
        preparedStatement.setLong(4, 1L);
        preparedStatement.executeUpdate();
    }
}
