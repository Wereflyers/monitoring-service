package ru.ylab.repository;

import lombok.SneakyThrows;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Order;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.testcontainers.containers.PostgreSQLContainer;
import org.testcontainers.junit.jupiter.Container;
import org.testcontainers.junit.jupiter.Testcontainers;
import org.testcontainers.utility.DockerImageName;

import java.sql.*;

import static org.assertj.core.api.Assertions.assertThat;

@Testcontainers
@ExtendWith(MockitoExtension.class)
class IndicationTypeRepositoryTest {
    private static Connection connection;

    @Container
    public static PostgreSQLContainer<?> postgreSQLContainer =
            new PostgreSQLContainer<>(DockerImageName.parse("postgres:14-alpine"))
            .withExposedPorts(5432);

    @BeforeAll
    public static void setUp() {
        try {
            connection = DriverManager.getConnection(
                    postgreSQLContainer.getJdbcUrl(),
                    postgreSQLContainer.getUsername(),
                    postgreSQLContainer.getPassword()
            );
            String insertDataSql1 = "create table INDICATION_TYPE" +
                    "(" +
                    "    ID        BIGINT                not null generated by default as identity," +
                    "    TYPE_NAME CHARACTER VARYING(30) not null," +
                    "    constraint INDICATION_TYPE_PK" +
                    "        primary key (ID)" +
                    ");";
            PreparedStatement preparedStatement1 = connection.prepareStatement(insertDataSql1);
            preparedStatement1.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
            throw new RuntimeException(e);
        }
    }

    @Test
    @Order(1)
    @SneakyThrows
    @DisplayName("Добавление типа в таблицу")
    public void addTypeTest() {
        String type = "New_type";

        String insertDataSql = "INSERT INTO indication_type (TYPE_NAME) VALUES (?)";
        PreparedStatement preparedStatement = connection.prepareStatement(insertDataSql);
        preparedStatement.setString(1, type);
        preparedStatement.executeUpdate();

        String checkDataSql = "SELECT * FROM indication_type WHERE TYPE_NAME = ?";
        PreparedStatement preparedStatement2 = connection.prepareStatement(checkDataSql);
        preparedStatement2.setString(1, type);
        ResultSet resultSet = preparedStatement2.executeQuery();
        resultSet.next();

        assertThat(resultSet.getString("TYPE_NAME")).isEqualTo(type);

        String checkDataSql2 = "SELECT COUNT(*) as count FROM indication_type WHERE TYPE_NAME = ?";
        PreparedStatement preparedStatement3 = connection.prepareStatement(checkDataSql2);
        preparedStatement3.setString(1, type);
        ResultSet resultSet2 = preparedStatement3.executeQuery();
        resultSet2.next();

        assertThat(resultSet2.getInt("count")).isEqualTo(1);
    }

    @Test
    @Order(2)
    @SneakyThrows
    @DisplayName("Выгрузка всех типов показаний")
    public void ifExistUserTest() {
        String insertDataSql = "INSERT INTO indication_type (TYPE_NAME) VALUES (?)";
        PreparedStatement preparedStatement = connection.prepareStatement(insertDataSql);
        preparedStatement.setString(1, "first_type");
        preparedStatement.executeUpdate();
        preparedStatement.setString(1, "second_type");
        preparedStatement.executeUpdate();

        String checkDataSql = "SELECT * FROM indication_type";
        PreparedStatement preparedStatement2 = connection.prepareStatement(checkDataSql);
        ResultSet resultSet = preparedStatement2.executeQuery();

        resultSet.next();
        assertThat(resultSet.getString("TYPE_NAME")).isEqualTo("New_type");
        resultSet.next();
        assertThat(resultSet.getString("TYPE_NAME")).isEqualTo("first_type");
        resultSet.next();
        assertThat(resultSet.getString("TYPE_NAME")).isEqualTo("second_type");
    }
}
