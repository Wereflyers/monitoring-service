package ru.ylab.repository;

import lombok.SneakyThrows;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.testcontainers.containers.PostgreSQLContainer;
import org.testcontainers.junit.jupiter.Container;
import org.testcontainers.junit.jupiter.Testcontainers;
import org.testcontainers.utility.DockerImageName;

import java.sql.*;

import static org.assertj.core.api.Assertions.assertThat;

@Testcontainers
@ExtendWith(MockitoExtension.class)
class AuthRepositoryTest {
    private static Connection connection;

    @Container
    public static PostgreSQLContainer<?> postgreSQLContainer =
            new PostgreSQLContainer<>(DockerImageName.parse("postgres:14-alpine"))
            .withExposedPorts(5432);

    @BeforeEach
    public void setUp() {
        try {
            connection = DriverManager.getConnection(
                    postgreSQLContainer.getJdbcUrl(),
                    postgreSQLContainer.getUsername(),
                    postgreSQLContainer.getPassword()
            );
            String insertDataSql1 = "create table if not exists USERS_TABLE" +
                    "(" +
                    "    USERNAME     CHARACTER VARYING(255) not null" +
                    "        unique," +
                    "    PASSWORD CHARACTER VARYING(255) not null," +
                    "    ID       BIGINT generated by default as identity" +
                    "        primary key" +
                    ");";
            PreparedStatement preparedStatement1 = connection.prepareStatement(insertDataSql1);
            preparedStatement1.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
            throw new RuntimeException(e);
        }
    }

    @AfterEach
    @SneakyThrows
    public void delete() {
        String insertDataSql = "drop table if exists users_table";
        PreparedStatement preparedStatement = connection.prepareStatement(insertDataSql);
        preparedStatement.executeUpdate();
    }

    @Test
    @SneakyThrows
    @DisplayName("Добавление пользователя в таблицу")
    public void addUserTest() {
        String username = "name";

        String insertDataSql = "INSERT INTO users_table (username, password) VALUES (?, ?)";
        PreparedStatement preparedStatement = connection.prepareStatement(insertDataSql);
        preparedStatement.setString(1, username);
        preparedStatement.setString(2, "password");
        preparedStatement.executeUpdate();

        String checkDataSql = "SELECT * FROM users_table WHERE username = ?";
        PreparedStatement preparedStatement2 = connection.prepareStatement(checkDataSql);
        preparedStatement2.setString(1, username);
        ResultSet resultSet = preparedStatement2.executeQuery();
        resultSet.next();

        assertThat(resultSet.getString("username")).isEqualTo(username);

        String checkDataSql2 = "SELECT COUNT(*) as count FROM users_table WHERE username = ?";
        PreparedStatement preparedStatement3 = connection.prepareStatement(checkDataSql2);
        preparedStatement3.setString(1, username);
        ResultSet resultSet2 = preparedStatement3.executeQuery();
        resultSet2.next();

        assertThat(resultSet2.getInt("count")).isEqualTo(1);
    }

    @Test
    @SneakyThrows
    @DisplayName("Определение существования пользователя")
    public void ifExistUserTest() {
        String username = "name";
        String checkDataSql = "SELECT " +
                "EXISTS(SELECT * FROM users_table WHERE username = ?)";
        PreparedStatement preparedStatement = connection.prepareStatement(checkDataSql);
        preparedStatement.setString(1, username);

        ResultSet resultSet = preparedStatement.executeQuery();
        resultSet.next();
        assertThat(resultSet.getString(1)).isEqualTo("f");

        String insertDataSql = "INSERT INTO users_table (username, password) VALUES (?, ?)";
        PreparedStatement preparedStatement2 = connection.prepareStatement(insertDataSql);
        preparedStatement2.setString(1, username);
        preparedStatement2.setString(2, "password");
        preparedStatement2.executeUpdate();

        ResultSet resultSet2 = preparedStatement.executeQuery();
        resultSet2.next();
        assertThat(resultSet2.getString(1)).isEqualTo("t");
    }
}
